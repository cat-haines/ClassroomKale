
/* GLOBALS AND CONSTS --------------------------------------------------------*/

// neopixel bit field
const bits = "\xC0\x30\x0C\x03\x00\xC0\x30\x0C\x03\x00\xC0\x30\x0C\x03\x00\xC0\x30\x0C\x03\xE0\xC0\x30\x0C\x03\x00\xC0\x30\x0F\x83\x00\xC0\x30\x0C\x03\x00\xC0\x30\x0F\x83\xE0\xC0\x30\x0C\x03\x00\xC0\x3E\x0C\x03\x00\xC0\x30\x0C\x03\x00\xC0\x3E\x0C\x03\xE0\xC0\x30\x0C\x03\x00\xC0\x3E\x0F\x83\x00\xC0\x30\x0C\x03\x00\xC0\x3E\x0F\x83\xE0\xC0\x30\x0C\x03\x00\xF8\x30\x0C\x03\x00\xC0\x30\x0C\x03\x00\xF8\x30\x0C\x03\xE0\xC0\x30\x0C\x03\x00\xF8\x30\x0F\x83\x00\xC0\x30\x0C\x03\x00\xF8\x30\x0F\x83\xE0\xC0\x30\x0C\x03\x00\xF8\x3E\x0C\x03\x00\xC0\x30\x0C\x03\x00\xF8\x3E\x0C\x03\xE0\xC0\x30\x0C\x03\x00\xF8\x3E\x0F\x83\x00\xC0\x30\x0C\x03\x00\xF8\x3E\x0F\x83\xE0\xC0\x30\x0C\x03\xE0\xC0\x30\x0C\x03\x00\xC0\x30\x0C\x03\xE0\xC0\x30\x0C\x03\xE0\xC0\x30\x0C\x03\xE0\xC0\x30\x0F\x83\x00\xC0\x30\x0C\x03\xE0\xC0\x30\x0F\x83\xE0\xC0\x30\x0C\x03\xE0\xC0\x3E\x0C\x03\x00\xC0\x30\x0C\x03\xE0\xC0\x3E\x0C\x03\xE0\xC0\x30\x0C\x03\xE0\xC0\x3E\x0F\x83\x00\xC0\x30\x0C\x03\xE0\xC0\x3E\x0F\x83\xE0\xC0\x30\x0C\x03\xE0\xF8\x30\x0C\x03\x00\xC0\x30\x0C\x03\xE0\xF8\x30\x0C\x03\xE0\xC0\x30\x0C\x03\xE0\xF8\x30\x0F\x83\x00\xC0\x30\x0C\x03\xE0\xF8\x30\x0F\x83\xE0\xC0\x30\x0C\x03\xE0\xF8\x3E\x0C\x03\x00\xC0\x30\x0C\x03\xE0\xF8\x3E\x0C\x03\xE0\xC0\x30\x0C\x03\xE0\xF8\x3E\x0F\x83\x00\xC0\x30\x0C\x03\xE0\xF8\x3E\x0F\x83\xE0\xC0\x30\x0F\x83\x00\xC0\x30\x0C\x03\x00\xC0\x30\x0F\x83\x00\xC0\x30\x0C\x03\xE0\xC0\x30\x0F\x83\x00\xC0\x30\x0F\x83\x00\xC0\x30\x0F\x83\x00\xC0\x30\x0F\x83\xE0\xC0\x30\x0F\x83\x00\xC0\x3E\x0C\x03\x00\xC0\x30\x0F\x83\x00\xC0\x3E\x0C\x03\xE0\xC0\x30\x0F\x83\x00\xC0\x3E\x0F\x83\x00\xC0\x30\x0F\x83\x00\xC0\x3E\x0F\x83\xE0\xC0\x30\x0F\x83\x00\xF8\x30\x0C\x03\x00\xC0\x30\x0F\x83\x00\xF8\x30\x0C\x03\xE0\xC0\x30\x0F\x83\x00\xF8\x30\x0F\x83\x00\xC0\x30\x0F\x83\x00\xF8\x30\x0F\x83\xE0\xC0\x30\x0F\x83\x00\xF8\x3E\x0C\x03\x00\xC0\x30\x0F\x83\x00\xF8\x3E\x0C\x03\xE0\xC0\x30\x0F\x83\x00\xF8\x3E\x0F\x83\x00\xC0\x30\x0F\x83\x00\xF8\x3E\x0F\x83\xE0\xC0\x30\x0F\x83\xE0\xC0\x30\x0C\x03\x00\xC0\x30\x0F\x83\xE0\xC0\x30\x0C\x03\xE0\xC0\x30\x0F\x83\xE0\xC0\x30\x0F\x83\x00\xC0\x30\x0F\x83\xE0\xC0\x30\x0F\x83\xE0\xC0\x30\x0F\x83\xE0\xC0\x3E\x0C\x03\x00\xC0\x30\x0F\x83\xE0\xC0\x3E\x0C\x03\xE0\xC0\x30\x0F\x83\xE0\xC0\x3E\x0F\x83\x00\xC0\x30\x0F\x83\xE0\xC0\x3E\x0F\x83\xE0\xC0\x30\x0F\x83\xE0\xF8\x30\x0C\x03\x00\xC0\x30\x0F\x83\xE0\xF8\x30\x0C\x03\xE0\xC0\x30\x0F\x83\xE0\xF8\x30\x0F\x83\x00\xC0\x30\x0F\x83\xE0\xF8\x30\x0F\x83\xE0\xC0\x30\x0F\x83\xE0\xF8\x3E\x0C\x03\x00\xC0\x30\x0F\x83\xE0\xF8\x3E\x0C\x03\xE0\xC0\x30\x0F\x83\xE0\xF8\x3E\x0F\x83\x00\xC0\x30\x0F\x83\xE0\xF8\x3E\x0F\x83\xE0\xC0\x3E\x0C\x03\x00\xC0\x30\x0C\x03\x00\xC0\x3E\x0C\x03\x00\xC0\x30\x0C\x03\xE0\xC0\x3E\x0C\x03\x00\xC0\x30\x0F\x83\x00\xC0\x3E\x0C\x03\x00\xC0\x30\x0F\x83\xE0\xC0\x3E\x0C\x03\x00\xC0\x3E\x0C\x03\x00\xC0\x3E\x0C\x03\x00\xC0\x3E\x0C\x03\xE0\xC0\x3E\x0C\x03\x00\xC0\x3E\x0F\x83\x00\xC0\x3E\x0C\x03\x00\xC0\x3E\x0F\x83\xE0\xC0\x3E\x0C\x03\x00\xF8\x30\x0C\x03\x00\xC0\x3E\x0C\x03\x00\xF8\x30\x0C\x03\xE0\xC0\x3E\x0C\x03\x00\xF8\x30\x0F\x83\x00\xC0\x3E\x0C\x03\x00\xF8\x30\x0F\x83\xE0\xC0\x3E\x0C\x03\x00\xF8\x3E\x0C\x03\x00\xC0\x3E\x0C\x03\x00\xF8\x3E\x0C\x03\xE0\xC0\x3E\x0C\x03\x00\xF8\x3E\x0F\x83\x00\xC0\x3E\x0C\x03\x00\xF8\x3E\x0F\x83\xE0\xC0\x3E\x0C\x03\xE0\xC0\x30\x0C\x03\x00\xC0\x3E\x0C\x03\xE0\xC0\x30\x0C\x03\xE0\xC0\x3E\x0C\x03\xE0\xC0\x30\x0F\x83\x00\xC0\x3E\x0C\x03\xE0\xC0\x30\x0F\x83\xE0\xC0\x3E\x0C\x03\xE0\xC0\x3E\x0C\x03\x00\xC0\x3E\x0C\x03\xE0\xC0\x3E\x0C\x03\xE0\xC0\x3E\x0C\x03\xE0\xC0\x3E\x0F\x83\x00\xC0\x3E\x0C\x03\xE0\xC0\x3E\x0F\x83\xE0\xC0\x3E\x0C\x03\xE0\xF8\x30\x0C\x03\x00\xC0\x3E\x0C\x03\xE0\xF8\x30\x0C\x03\xE0\xC0\x3E\x0C\x03\xE0\xF8\x30\x0F\x83\x00\xC0\x3E\x0C\x03\xE0\xF8\x30\x0F\x83\xE0\xC0\x3E\x0C\x03\xE0\xF8\x3E\x0C\x03\x00\xC0\x3E\x0C\x03\xE0\xF8\x3E\x0C\x03\xE0\xC0\x3E\x0C\x03\xE0\xF8\x3E\x0F\x83\x00\xC0\x3E\x0C\x03\xE0\xF8\x3E\x0F\x83\xE0\xC0\x3E\x0F\x83\x00\xC0\x30\x0C\x03\x00\xC0\x3E\x0F\x83\x00\xC0\x30\x0C\x03\xE0\xC0\x3E\x0F\x83\x00\xC0\x30\x0F\x83\x00\xC0\x3E\x0F\x83\x00\xC0\x30\x0F\x83\xE0\xC0\x3E\x0F\x83\x00\xC0\x3E\x0C\x03\x00\xC0\x3E\x0F\x83\x00\xC0\x3E\x0C\x03\xE0\xC0\x3E\x0F\x83\x00\xC0\x3E\x0F\x83\x00\xC0\x3E\x0F\x83\x00\xC0\x3E\x0F\x83\xE0\xC0\x3E\x0F\x83\x00\xF8\x30\x0C\x03\x00\xC0\x3E\x0F\x83\x00\xF8\x30\x0C\x03\xE0\xC0\x3E\x0F\x83\x00\xF8\x30\x0F\x83\x00\xC0\x3E\x0F\x83\x00\xF8\x30\x0F\x83\xE0\xC0\x3E\x0F\x83\x00\xF8\x3E\x0C\x03\x00\xC0\x3E\x0F\x83\x00\xF8\x3E\x0C\x03\xE0\xC0\x3E\x0F\x83\x00\xF8\x3E\x0F\x83\x00\xC0\x3E\x0F\x83\x00\xF8\x3E\x0F\x83\xE0\xC0\x3E\x0F\x83\xE0\xC0\x30\x0C\x03\x00\xC0\x3E\x0F\x83\xE0\xC0\x30\x0C\x03\xE0\xC0\x3E\x0F\x83\xE0\xC0\x30\x0F\x83\x00\xC0\x3E\x0F\x83\xE0\xC0\x30\x0F\x83\xE0\xC0\x3E\x0F\x83\xE0\xC0\x3E\x0C\x03\x00\xC0\x3E\x0F\x83\xE0\xC0\x3E\x0C\x03\xE0\xC0\x3E\x0F\x83\xE0\xC0\x3E\x0F\x83\x00\xC0\x3E\x0F\x83\xE0\xC0\x3E\x0F\x83\xE0\xC0\x3E\x0F\x83\xE0\xF8\x30\x0C\x03\x00\xC0\x3E\x0F\x83\xE0\xF8\x30\x0C\x03\xE0\xC0\x3E\x0F\x83\xE0\xF8\x30\x0F\x83\x00\xC0\x3E\x0F\x83\xE0\xF8\x30\x0F\x83\xE0\xC0\x3E\x0F\x83\xE0\xF8\x3E\x0C\x03\x00\xC0\x3E\x0F\x83\xE0\xF8\x3E\x0C\x03\xE0\xC0\x3E\x0F\x83\xE0\xF8\x3E\x0F\x83\x00\xC0\x3E\x0F\x83\xE0\xF8\x3E\x0F\x83\xE0\xF8\x30\x0C\x03\x00\xC0\x30\x0C\x03\x00\xF8\x30\x0C\x03\x00\xC0\x30\x0C\x03\xE0\xF8\x30\x0C\x03\x00\xC0\x30\x0F\x83\x00\xF8\x30\x0C\x03\x00\xC0\x30\x0F\x83\xE0\xF8\x30\x0C\x03\x00\xC0\x3E\x0C\x03\x00\xF8\x30\x0C\x03\x00\xC0\x3E\x0C\x03\xE0\xF8\x30\x0C\x03\x00\xC0\x3E\x0F\x83\x00\xF8\x30\x0C\x03\x00\xC0\x3E\x0F\x83\xE0\xF8\x30\x0C\x03\x00\xF8\x30\x0C\x03\x00\xF8\x30\x0C\x03\x00\xF8\x30\x0C\x03\xE0\xF8\x30\x0C\x03\x00\xF8\x30\x0F\x83\x00\xF8\x30\x0C\x03\x00\xF8\x30\x0F\x83\xE0\xF8\x30\x0C\x03\x00\xF8\x3E\x0C\x03\x00\xF8\x30\x0C\x03\x00\xF8\x3E\x0C\x03\xE0\xF8\x30\x0C\x03\x00\xF8\x3E\x0F\x83\x00\xF8\x30\x0C\x03\x00\xF8\x3E\x0F\x83\xE0\xF8\x30\x0C\x03\xE0\xC0\x30\x0C\x03\x00\xF8\x30\x0C\x03\xE0\xC0\x30\x0C\x03\xE0\xF8\x30\x0C\x03\xE0\xC0\x30\x0F\x83\x00\xF8\x30\x0C\x03\xE0\xC0\x30\x0F\x83\xE0\xF8\x30\x0C\x03\xE0\xC0\x3E\x0C\x03\x00\xF8\x30\x0C\x03\xE0\xC0\x3E\x0C\x03\xE0\xF8\x30\x0C\x03\xE0\xC0\x3E\x0F\x83\x00\xF8\x30\x0C\x03\xE0\xC0\x3E\x0F\x83\xE0\xF8\x30\x0C\x03\xE0\xF8\x30\x0C\x03\x00\xF8\x30\x0C\x03\xE0\xF8\x30\x0C\x03\xE0\xF8\x30\x0C\x03\xE0\xF8\x30\x0F\x83\x00\xF8\x30\x0C\x03\xE0\xF8\x30\x0F\x83\xE0\xF8\x30\x0C\x03\xE0\xF8\x3E\x0C\x03\x00\xF8\x30\x0C\x03\xE0\xF8\x3E\x0C\x03\xE0\xF8\x30\x0C\x03\xE0\xF8\x3E\x0F\x83\x00\xF8\x30\x0C\x03\xE0\xF8\x3E\x0F\x83\xE0\xF8\x30\x0F\x83\x00\xC0\x30\x0C\x03\x00\xF8\x30\x0F\x83\x00\xC0\x30\x0C\x03\xE0\xF8\x30\x0F\x83\x00\xC0\x30\x0F\x83\x00\xF8\x30\x0F\x83\x00\xC0\x30\x0F\x83\xE0\xF8\x30\x0F\x83\x00\xC0\x3E\x0C\x03\x00\xF8\x30\x0F\x83\x00\xC0\x3E\x0C\x03\xE0\xF8\x30\x0F\x83\x00\xC0\x3E\x0F\x83\x00\xF8\x30\x0F\x83\x00\xC0\x3E\x0F\x83\xE0\xF8\x30\x0F\x83\x00\xF8\x30\x0C\x03\x00\xF8\x30\x0F\x83\x00\xF8\x30\x0C\x03\xE0\xF8\x30\x0F\x83\x00\xF8\x30\x0F\x83\x00\xF8\x30\x0F\x83\x00\xF8\x30\x0F\x83\xE0\xF8\x30\x0F\x83\x00\xF8\x3E\x0C\x03\x00\xF8\x30\x0F\x83\x00\xF8\x3E\x0C\x03\xE0\xF8\x30\x0F\x83\x00\xF8\x3E\x0F\x83\x00\xF8\x30\x0F\x83\x00\xF8\x3E\x0F\x83\xE0\xF8\x30\x0F\x83\xE0\xC0\x30\x0C\x03\x00\xF8\x30\x0F\x83\xE0\xC0\x30\x0C\x03\xE0\xF8\x30\x0F\x83\xE0\xC0\x30\x0F\x83\x00\xF8\x30\x0F\x83\xE0\xC0\x30\x0F\x83\xE0\xF8\x30\x0F\x83\xE0\xC0\x3E\x0C\x03\x00\xF8\x30\x0F\x83\xE0\xC0\x3E\x0C\x03\xE0\xF8\x30\x0F\x83\xE0\xC0\x3E\x0F\x83\x00\xF8\x30\x0F\x83\xE0\xC0\x3E\x0F\x83\xE0\xF8\x30\x0F\x83\xE0\xF8\x30\x0C\x03\x00\xF8\x30\x0F\x83\xE0\xF8\x30\x0C\x03\xE0\xF8\x30\x0F\x83\xE0\xF8\x30\x0F\x83\x00\xF8\x30\x0F\x83\xE0\xF8\x30\x0F\x83\xE0\xF8\x30\x0F\x83\xE0\xF8\x3E\x0C\x03\x00\xF8\x30\x0F\x83\xE0\xF8\x3E\x0C\x03\xE0\xF8\x30\x0F\x83\xE0\xF8\x3E\x0F\x83\x00\xF8\x30\x0F\x83\xE0\xF8\x3E\x0F\x83\xE0\xF8\x3E\x0C\x03\x00\xC0\x30\x0C\x03\x00\xF8\x3E\x0C\x03\x00\xC0\x30\x0C\x03\xE0\xF8\x3E\x0C\x03\x00\xC0\x30\x0F\x83\x00\xF8\x3E\x0C\x03\x00\xC0\x30\x0F\x83\xE0\xF8\x3E\x0C\x03\x00\xC0\x3E\x0C\x03\x00\xF8\x3E\x0C\x03\x00\xC0\x3E\x0C\x03\xE0\xF8\x3E\x0C\x03\x00\xC0\x3E\x0F\x83\x00\xF8\x3E\x0C\x03\x00\xC0\x3E\x0F\x83\xE0\xF8\x3E\x0C\x03\x00\xF8\x30\x0C\x03\x00\xF8\x3E\x0C\x03\x00\xF8\x30\x0C\x03\xE0\xF8\x3E\x0C\x03\x00\xF8\x30\x0F\x83\x00\xF8\x3E\x0C\x03\x00\xF8\x30\x0F\x83\xE0\xF8\x3E\x0C\x03\x00\xF8\x3E\x0C\x03\x00\xF8\x3E\x0C\x03\x00\xF8\x3E\x0C\x03\xE0\xF8\x3E\x0C\x03\x00\xF8\x3E\x0F\x83\x00\xF8\x3E\x0C\x03\x00\xF8\x3E\x0F\x83\xE0\xF8\x3E\x0C\x03\xE0\xC0\x30\x0C\x03\x00\xF8\x3E\x0C\x03\xE0\xC0\x30\x0C\x03\xE0\xF8\x3E\x0C\x03\xE0\xC0\x30\x0F\x83\x00\xF8\x3E\x0C\x03\xE0\xC0\x30\x0F\x83\xE0\xF8\x3E\x0C\x03\xE0\xC0\x3E\x0C\x03\x00\xF8\x3E\x0C\x03\xE0\xC0\x3E\x0C\x03\xE0\xF8\x3E\x0C\x03\xE0\xC0\x3E\x0F\x83\x00\xF8\x3E\x0C\x03\xE0\xC0\x3E\x0F\x83\xE0\xF8\x3E\x0C\x03\xE0\xF8\x30\x0C\x03\x00\xF8\x3E\x0C\x03\xE0\xF8\x30\x0C\x03\xE0\xF8\x3E\x0C\x03\xE0\xF8\x30\x0F\x83\x00\xF8\x3E\x0C\x03\xE0\xF8\x30\x0F\x83\xE0\xF8\x3E\x0C\x03\xE0\xF8\x3E\x0C\x03\x00\xF8\x3E\x0C\x03\xE0\xF8\x3E\x0C\x03\xE0\xF8\x3E\x0C\x03\xE0\xF8\x3E\x0F\x83\x00\xF8\x3E\x0C\x03\xE0\xF8\x3E\x0F\x83\xE0\xF8\x3E\x0F\x83\x00\xC0\x30\x0C\x03\x00\xF8\x3E\x0F\x83\x00\xC0\x30\x0C\x03\xE0\xF8\x3E\x0F\x83\x00\xC0\x30\x0F\x83\x00\xF8\x3E\x0F\x83\x00\xC0\x30\x0F\x83\xE0\xF8\x3E\x0F\x83\x00\xC0\x3E\x0C\x03\x00\xF8\x3E\x0F\x83\x00\xC0\x3E\x0C\x03\xE0\xF8\x3E\x0F\x83\x00\xC0\x3E\x0F\x83\x00\xF8\x3E\x0F\x83\x00\xC0\x3E\x0F\x83\xE0\xF8\x3E\x0F\x83\x00\xF8\x30\x0C\x03\x00\xF8\x3E\x0F\x83\x00\xF8\x30\x0C\x03\xE0\xF8\x3E\x0F\x83\x00\xF8\x30\x0F\x83\x00\xF8\x3E\x0F\x83\x00\xF8\x30\x0F\x83\xE0\xF8\x3E\x0F\x83\x00\xF8\x3E\x0C\x03\x00\xF8\x3E\x0F\x83\x00\xF8\x3E\x0C\x03\xE0\xF8\x3E\x0F\x83\x00\xF8\x3E\x0F\x83\x00\xF8\x3E\x0F\x83\x00\xF8\x3E\x0F\x83\xE0\xF8\x3E\x0F\x83\xE0\xC0\x30\x0C\x03\x00\xF8\x3E\x0F\x83\xE0\xC0\x30\x0C\x03\xE0\xF8\x3E\x0F\x83\xE0\xC0\x30\x0F\x83\x00\xF8\x3E\x0F\x83\xE0\xC0\x30\x0F\x83\xE0\xF8\x3E\x0F\x83\xE0\xC0\x3E\x0C\x03\x00\xF8\x3E\x0F\x83\xE0\xC0\x3E\x0C\x03\xE0\xF8\x3E\x0F\x83\xE0\xC0\x3E\x0F\x83\x00\xF8\x3E\x0F\x83\xE0\xC0\x3E\x0F\x83\xE0\xF8\x3E\x0F\x83\xE0\xF8\x30\x0C\x03\x00\xF8\x3E\x0F\x83\xE0\xF8\x30\x0C\x03\xE0\xF8\x3E\x0F\x83\xE0\xF8\x30\x0F\x83\x00\xF8\x3E\x0F\x83\xE0\xF8\x30\x0F\x83\xE0\xF8\x3E\x0F\x83\xE0\xF8\x3E\x0C\x03\x00\xF8\x3E\x0F\x83\xE0\xF8\x3E\x0C\x03\xE0\xF8\x3E\x0F\x83\xE0\xF8\x3E\x0F\x83\x00\xF8\x3E\x0F\x83\xE0\xF8\x3E\x0F\x83\xE0";
// neopixel pixel count
const NUMPIXELS = 60;
// neopixel inter-frame delay (seconds)
const DELAY = 0.005;
// temp-humidity polling interval (seconds)
const THINTERVAL = 60;

stopRainbow <- false;

/* GLOBAL FUNCTIONS ANDF CLASS DEFINITIONS -----------------------------------*/

/* HIH6131 TEMP + HUMIDITY SENSOR */
class hih6131 {
 
    static WAIT = 80; // milliseconds
    _i2c = null;
    _addr = null;
 
    constructor(i2c, addr = 0x4E){
        _i2c = i2c;
        _addr = addr;
        
    }
  
    function convert(th) {
            local t = ((((th[2]         << 6 ) | (th[3] >> 2)) * 165) / 16383.0) - 40;
            local h = ((((th[0] & 0x3F) << 8 ) | (th[1]     ))        / 163.83 );
    
            //Round to 2 decimal places
            t = (t*100).tointeger() / 100.0;
            h = (h*100).tointeger() / 100.0;
            //server.log("temp " + t);
            //server.log("humidity " + h);
            local results = {temp = t, humidity = h};
            return results;
    }


    function read(callback = null) {
        _i2c.write(_addr, "");

        imp.sleep(WAIT/1000.0);
        local th = _i2c.read(_addr, "", 4);
        //server.log(th);
        if (th == null) {
            server.log("Got null result from sensor");
            local results = {temp = null, humidity = null};
            return results;
        } else {
            return convert(th);
        }
    }
  
}

/* NEOPIXEL RGB LED STRIP (60 PX) */
class neoPixels {
    spi = null;
    frameSize = null;
    frame = null;

    // _spi - A configured spi (MSB_FIRST, 7.5MHz)
    // _frameSize - Number of Pixels per frame
    constructor(_spi, _frameSize) {
        this.spi = _spi;
        this.frameSize = _frameSize;
        this.frame = blob(frameSize*30 + 20);
        
        clearFrame();
        writeFrame();
    }

    function writePixel(p,r,g,b) {
        frame.seek(p*30);
        local i = 0;
        
        // release 26:
        for (i = 0 ; i < 10; i++) frame.writen(bits[g*10 + i],'c');
        for (i = 0 ; i < 10; i++) frame.writen(bits[r*10 + i],'c');
        for (i = 0 ; i < 10; i++) frame.writen(bits[b*10 + i],'c');
        //frame.writestring(bits[g]);
        //frame.writestring(bits[r]);
        //frame.writestring(bits[b]);
    }
    
    function clearFrame() {
      for (local p = 0; p < frameSize; p++) writePixel(p,0,0,0);
      for (local i = 0; i < 40; i++) frame.writen(0x00,'c');
    }
    
    function writeFrame() {
        spi.write(frame);
    }
}

/* Set the whole neopixel strip to a solid color.
 * Input: colorTuple (table with three values:)
 *      red: red value (0 - 255)
 *      green: green value (0 -255)
 *      blue: blue value (0-255)
 * Return: none
 * Requires that neopixels are already instantiated as pixelStrip
 */
function setColor(colorTuple) {
    stopRainbow = true;
    // sanitized color values from agent (sorta)
    local red = colorTuple.r;
    local green = colorTuple.g;
    local blue = colorTuple.b;
    if (red > 255) red = 255;
    if (red < 0) red = 0;
    if (green > 255) green = 255;
    if (green < 0) green = 0;
    if (blue > 255) blue = 255;
    if (blue < 0) blue = 0;
    
    // get a blank neopixel frame
    pixelStrip.clearFrame();
    // fill the frame with our color tuple
    for (local i = 0; i < NUMPIXELS; i++) {
        pixelStrip.writePixel(i,red,green,blue);
    }
    // send the frame out to the device
    pixelStrip.writeFrame();
    
    // update the agent with the latest color set (usually just feedback);
    agent.send("colorIsNow",format("%02x%02x%02x",red,green,blue));
}

// run a test on the neopixel strip
testPixels <- [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
currentTestPixel <- 0;
pAdd <- 1;
function neoTest(d = null) { 
  pixelStrip.writePixel(testPixels[0], 0, 0, 0);
  for(local i = 1; i < 40; i++) {
      local b = math.pow(2, i);
      pixelStrip.writePixel(testPixels[i], b * 2, b, b * 3);
  }
  
  pixelStrip.writeFrame();
  if (currentTestPixel >= NUMPIXELS-1) pAdd = -1;
  if (currentTestPixel <= 0) pAdd = 1;
  currentTestPixel += pAdd;
  
  for (local i = 0; i < 4; i++) testPixels[i] = testPixels[i+1];
  testPixels[4] = currentTestPixel;
  
  imp.wakeup(DELAY, neoTest);
} 

function rainbow() {
    //pixelStrip.writePixel(testPixels[0], 0, 0, 0);
    for(local i = 1; i < 6; i++) {
        local b = math.pow(3, i);
        pixelStrip.writePixel(testPixels[i-1], 0,0,b);
        pixelStrip.writePixel(testPixels[i+5],0,b,0);
        pixelStrip.writePixel(testPixels[i+11],b,0,0);
        pixelStrip.writePixel(testPixels[i+17], 0,0,b);
        pixelStrip.writePixel(testPixels[i+23],0,b,0);
        pixelStrip.writePixel(testPixels[i+29],b,0,0);
        pixelStrip.writePixel(testPixels[i+35], 0,0,b);
        pixelStrip.writePixel(testPixels[i+41],0,b,0);
        pixelStrip.writePixel(testPixels[i+47],b,0,0);
        pixelStrip.writePixel(testPixels[i+53], 0,0,b);
    }
  
    pixelStrip.writeFrame();
    if (currentTestPixel >= NUMPIXELS-1) currentTestPixel = 0;
    else currentTestPixel++;
  
    for (local i = 0; i < NUMPIXELS; i++) testPixels[i] = testPixels[i+1];
    testPixels[NUMPIXELS-1] = currentTestPixel;
  
    if (!stopRainbow) imp.wakeup(DELAY, rainbow);
}

function pollTH() {
    imp.wakeup(THINTERVAL, pollTH);
    agent.send("thUpdate",temp_hum.read());
}

/* REGISTER AGENT CALLBACKS --------------------------------------------------*/
// set the color. Takes an RGB Tuple. All zeros to turn off.
agent.on("setColor", setColor);
// fetch the temp & humidity
agent.on("getTH", function(dummy) {
    server.log("Device got TH request.");
    agent.send("thUpdate",temp_hum.read());
});
// put on a light show
agent.on("rainbow",function(value) {
    if (value) {
        stopRainbow = false;
        server.log("rainbowing.");
        testPixels = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
        currentTestPixel = 0;
        pAdd = 1;
        rainbow();
    } else {
        stopRainbow = true;
    }
    
});


/* RUNTIME BEGINS HERE -------------------------------------------------------*/

imp.configure("Megan Kale",[],[]);
imp.enableblinkup(true);
server.log("Imp running SW V: "+imp.getsoftwareversion());

/* pin assignments -------------------------------------------------------------
pin1 - SO1 (sensor output 1, 5V analog gas sensor) - not used here (need parts)
pin2 - data out for neopixel strip (SPI257 MOSI)
pin6 - user LED
pin8 - I2C 89 SCL
pin9 - I2C 89 SDA
pinB - SO5 (sensor output 5, 5V analog gas sensor) - not used here (need parts)
pinC - Buzzer - PWM out for piezo buzzer
pinE - 3.3V Sensor Rail Enable
------------------------------------------------------------------------------*/
o2_sns <- hardware.pin1;
o2_sns.configure(ANALOG_IN);

spi <- hardware.spi257;
// reconfigure pins 2 and 5 because we're not using them.
hardware.pin2.configure(DIGITAL_IN);    // unused because we don't have a gas sensor
hardware.pin5.configure(DIGITAL_IN);    // unused because we have a second imp running the pump

led <- hardware.pin6;
led.configure(DIGITAL_OUT);
led.write(0);

i2c <- hardware.i2c89;

co2_sns <- hardware.pinB;
co2_sns.configure(ANALOG_IN);

buzzer <- hardware.pinC;
buzzer.configure(PWM_OUT, 1/1000.0, 0.0);

sns_en <- hardware.pinE;
// Enable sensor rail
sns_en.configure(DIGITAL_OUT);
sns_en.write(1);

/* done with pin assignment / configuration ----------------------------------*/

// Bring up T&H sensor
i2c.configure(CLOCK_SPEED_100_KHZ);

// Test T&H Sensor
temp_hum <- hih6131(i2c);

// bring up SPI (MOSI) for neopixel strip
spi.configure(MSB_FIRST, 7500);

// instantiate the neopixel strip
pixelStrip <- neoPixels(spi, NUMPIXELS);
// set a solid color on the neoPixels
//setColor({r = 255, g = 255, b = 20});

// start polling temp/humidity sensor
pollTH();
